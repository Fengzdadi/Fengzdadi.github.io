[{"categories":["Tech"],"date":"2025-08-18T03:58:00+08:00","summary":"这篇文章更像一个“反思录”，记录一下整个 nebula-pyg 的开发过程。\n初逢 还是要先感谢 OSPP 这个平台，让我遇见了 NebulaGraph 社区和 wey-gu老师。\n当然，项目还是需要竞争的，记得最初钟意的项目有 Kwok 的 “为 KWOK 添加 模拟真实 Pod 行为的策略配置”，以及现在就在做的 “NebulaGraph PyG Integration”。\n我是那种非常害怕竞争的人，要面试，讲想法（其实就是太菜了，如果你够了解，对这些东西应该是侃侃而谈的）。 即使我非常想尝试云原生相关的内容，最后因为觉得自己不熟练，放弃了，转而投向我更熟悉的 PyG 。\n现在去查了一下 四月份和 wey-gu老师 交流的邮件，来回总共七封，我竟然写了五封哈哈，其中第一封被错过了，大概十天后进行了 follow-up。得到了回复。 客观点来说，我现在看当时的邮件，感觉我像是早早滚蛋的样子。\n后来加上了X，老师的交流一下子就轻松了很多，简单说明了一下我的想法后，就开始等待第一次的线上交流。\n这次交流也是很意外的一件事哈哈，好像我并没有被通知到具体在几点参加会议，然后立马找了个咖啡厅进去，一脸懵逼的进，一脸懵逼的出。\n交流的时候，发现和我一起参与这个项目的两位也都很厉害，并且其中一位，在后续开发过程中，在一些相关搜索的时候，Google到了。 能通过他的Blog，他在准备的时候也做了好多相关工作。\n那我也是很辛运的一位了!\n（突然想知道为什么是我入选哈哈哈）\n接着就是长时间的等待结果了。录取！\n设计 这个项目的设计，整体上是参考了 KUZU 所做的，给 PyG 做 remote 适配的工作。\n框架大体上是相同的，在细节上会因为 nebulagraph 的特性做一些特殊处理。\n框架 总的来说，比较核心的点是实现 PyG 中的 FeatureStore 和 GraphStore 这两个接口。\n在上层，会为实例化这两个接口做一个额外的类，来满足一行代码就能返回两个实例，也就是现在的 NebulaPyG 这个类。 NebulaPyG 这个类还写了一个方法 create_snapshot() 专门解决 vid 问题。\n将 FeatureStore 和 GraphStore 这两个接口中的工具类通用化，放在了 utils.py 和 type_helper.py 的包中。 其中包括对特征的维度判断工具 get_feature_dim()，为产生全局 snapshot 的 scan_all_tag_vids() 等等。\n","tags":["NebulaGraph","PyG","GNN"],"title":"NebulaGraph × PyG","url":"/blog/2025/nebulagraph-pyg/"},{"categories":["Life"],"date":"2025-08-15T20:00:00+08:00","summary":"这是本站的第一篇文章，用来记录搭建过程与后续写作规划。\n虽然Hugo还是比较方便的，但第一次使用，很多工作也是通过GPT-5了解的，并且这篇文章的大体框架也是GPT帮我定的。 一开始，总觉得要写一点什么不一样的给这个 Blog 。在GPT-5的建议下，我觉得我得到了统计学概率上的“大家都写什么”，那我就来写点大家都写的内容！\n如果你喜欢这个Blog风格，希望这篇文章能帮助到你。\n","tags":["Hugo","Stack","Blog"],"title":"Hello, Stack：本站搭建记录与一些写作碎碎念","url":"/blog/2025/hello-stack%E6%9C%AC%E7%AB%99%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95%E4%B8%8E%E4%B8%80%E4%BA%9B%E5%86%99%E4%BD%9C%E7%A2%8E%E7%A2%8E%E5%BF%B5/"}]